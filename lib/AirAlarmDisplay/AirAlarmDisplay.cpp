/*
  AirAlarmDisplay.cpp -Library for display Air Alarm Statuses..
  May, 2023.
  Released into the public domain.
*/

#include "Arduino.h"
#include "AirAlarmDisplay.h"


#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32



Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

static const uint8_t strips4[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x01, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xe0, 
  0x0f, 0xc0, 0x03, 0xf0, 0x3f, 0x00, 0x00, 0xfc, 0x7c, 0x00, 0x00, 0x3e, 0x70, 0x07, 0xf0, 0x0f, 
  0x60, 0x3f, 0xfc, 0x06, 0x00, 0xff, 0xff, 0x00, 0x03, 0xfc, 0x1f, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 
  0x07, 0x80, 0x01, 0xe0, 0x03, 0x00, 0x00, 0x40, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t strips3[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
  0x00, 0x7f, 0xfe, 0x00, 0x00, 0xff, 0xff, 0x00, 0x03, 0xf8, 0x1f, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 
  0x07, 0x80, 0x01, 0xe0, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t strips2[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t strip1[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t dino[] = {
  0x00, 0x03, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x06, 0x7f, 0xf0, 0x00, 0x06, 0x7f, 0xf0, 
  0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 
  0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xff, 0x00, 
  0x00, 0x07, 0xc0, 0x00, 0x80, 0x0f, 0xc0, 0x00, 0xc0, 0x1f, 0xc0, 0x00, 0xe0, 0x7f, 0xc0, 0x00, 
  0xf1, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xc0, 0x00, 
  0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xfe, 0x00, 0x00, 
  0x0f, 0xf8, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x01, 0xd8, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 
  0x01, 0xc8, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00
};
static const uint8_t clear[] = { //Сонячно
  0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 
  0x18, 0x18, 0x18, 0x18, 0x06, 0x1f, 0xf8, 0x60, 0x06, 0x1f, 0xf8, 0x60, 0x01, 0xff, 0xff, 0x80, 
  0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe0, 
  0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80, 
  0x01, 0xff, 0xff, 0x80, 0x06, 0x1f, 0xf8, 0x60, 0x06, 0x1f, 0xf8, 0x60, 0x18, 0x18, 0x18, 0x18, 
  0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00
};
static const uint8_t clouds[] PROGMEM = { //Хмарно
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x00, 
  0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 
  0x01, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xfc, 
  0x3f, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 
  0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t drizzle[] PROGMEM = { //Мряка
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
  0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x80, 
  0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 
  0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x18, 0x30, 0x38, 0x08, 0x18, 0x30, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc1, 0x83, 0x03, 0xc0, 0xc1, 0x83, 0x03
};
static const uint8_t atmosphere[] PROGMEM = { //Туман
  0x00, 0x03, 0xff, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0xc0, 
  0x00, 0x3c, 0x00, 0xf0, 0x00, 0x3c, 0x00, 0xf0, 0x00, 0xc3, 0x03, 0x0c, 0x00, 0xc3, 0x03, 0x0c, 
  0x03, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x03, 0x03, 0x0f, 0xf0, 0x03, 0x03, 0x0f, 0xf0, 0x03, 
  0x02, 0x3f, 0xfc, 0x03, 0x00, 0x3f, 0xfc, 0x03, 0x00, 0x7f, 0xfe, 0x03, 0x00, 0xff, 0xff, 0x0c, 
  0x00, 0xff, 0xff, 0x0c, 0x00, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 
  0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0
};
static const uint8_t snow[] PROGMEM = { //Сніг
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
  0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x80, 
  0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xf0, 
  0x0f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3c, 0x03, 0xc0, 0x3c, 0x3c, 0x03, 0xc0, 0x3c, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0x0f, 0xf0, 0xff, 
  0xff, 0x0f, 0xf0, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0x3c, 0x03, 0xc0, 0x3c, 0x3c, 0x03, 0xc0, 0x3c
};
static const uint8_t rain[] PROGMEM = { //Дощ
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
  0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x80, 
  0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 
  0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0xc1, 0x81, 0x83, 0x30, 0xc1, 0x81, 0x83, 0xc3, 0x06, 0x06, 0x0c, 0xc3, 0x06, 0x06, 0x0c, 
  0x0c, 0x18, 0x18, 0x30, 0x0c, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0xc0, 0x30, 0x60, 0x60, 0xc0
};
static const uint8_t thunderstorm[] PROGMEM = { //Гроза
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x30, 0x0c, 0x00, 
  0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x0f, 0xc0, 0x03, 0xf0, 
  0x0f, 0xc0, 0x03, 0xf0, 0x30, 0x30, 0x0c, 0x0c, 0x30, 0x30, 0x0c, 0x0c, 0xc0, 0x00, 0x00, 0x03, 
  0xc0, 0x00, 0x00, 0x03, 0xc0, 0x3f, 0xfe, 0x03, 0xc0, 0x3f, 0xfe, 0x03, 0xc0, 0x3f, 0xfe, 0x03, 
  0xc0, 0x3f, 0xfe, 0x03, 0x30, 0x3f, 0xfe, 0x0c, 0x30, 0x3f, 0xfe, 0x0c, 0x0c, 0x3f, 0xfe, 0x70, 
  0x0c, 0x3f, 0xf8, 0x70, 0x04, 0x3f, 0xf8, 0x60, 0x00, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xe0, 0x00, 
  0x00, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00
};
static const uint8_t alarma[] = { //Тривога 
  0x00, 0x07, 0xe0, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x01, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xc0, 
  0x07, 0xff, 0xff, 0xe0, 0x0f, 0xf8, 0x1f, 0xf0, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xfc, 
  0x3f, 0xf8, 0x1f, 0xfc, 0x7f, 0xf8, 0x1f, 0xfe, 0x7f, 0xf8, 0x1f, 0xfe, 0x7f, 0xf8, 0x1f, 0xff, 
  0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 
  0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 
  0x3f, 0xf8, 0x1f, 0xfc, 0x1f, 0xf8, 0x1f, 0xf8, 0x0f, 0xf8, 0x1f, 0xf0, 0x07, 0xf8, 0x1f, 0xf0, 
  0x03, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x1f, 0xf8, 0x00
};
static const uint8_t no_alarm[] = { //Без тривоги
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x01, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xc0, 
  0x07, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xfc, 
  0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf8, 0xfe, 0x7f, 0xff, 0xf0, 0x7e, 
  0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0x1f, 0x03, 0xff, 
  0xfe, 0x0e, 0x07, 0xff, 0xfe, 0x04, 0x0f, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x3f, 0xff, 
  0x7f, 0xc0, 0x7f, 0xfe, 0x7f, 0xe0, 0xff, 0xfe, 0x7f, 0xf1, 0xff, 0xfe, 0x3f, 0xfb, 0xff, 0xfc, 
  0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xe0, 
  0x03, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x0f, 0xf0, 0x00
};
static const uint8_t pig[] = {
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x01, 0xc7, 0xe3, 0x80, 0x03, 0x3f, 0xfc, 0xc0, 
	0x06, 0xff, 0xff, 0x60, 0x09, 0xff, 0xff, 0x30, 0x18, 0x7f, 0xfe, 0x58, 0x37, 0x80, 0x00, 0x8c, 
	0x27, 0x8f, 0xf1, 0x24, 0x63, 0x3f, 0xf2, 0x46, 0x5a, 0x7f, 0xe4, 0x5a, 0x58, 0xff, 0xc9, 0x1a, 
	0xdc, 0xff, 0x93, 0x3b, 0xbe, 0xf7, 0x27, 0x7d, 0xbe, 0xf6, 0x4f, 0x7d, 0xbe, 0xfc, 0x9f, 0x7d, 
	0xbc, 0xf9, 0x3f, 0x3d, 0xb9, 0xf2, 0x0f, 0x9d, 0xbb, 0xe4, 0xe7, 0xdd, 0xdb, 0xc9, 0xd3, 0xdb, 
	0x53, 0x91, 0x8b, 0xca, 0x5b, 0x21, 0x8b, 0xda, 0x6a, 0x4b, 0xd3, 0xd6, 0x28, 0x87, 0xe7, 0x94, 
	0x31, 0x30, 0x0f, 0x2c, 0x1a, 0x3f, 0xfe, 0x58, 0x0c, 0x8f, 0xf1, 0x90, 0x06, 0xe0, 0x07, 0x60, 
	0x03, 0x3f, 0xfc, 0xc0, 0x01, 0xc7, 0xe3, 0x80, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x0f, 0xf0, 0x00
};
static const uint8_t swords[] = {
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0x78, 0x00, 0x00, 0x1e, 0x7e, 0x00, 0x00, 0x7e, 
	0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x80, 0x01, 0xfc, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xe0, 0x07, 0xf8, 
	0x0f, 0xf0, 0x0f, 0xf0, 0x07, 0xf8, 0x1f, 0xe0, 0x03, 0xfc, 0x3f, 0xc0, 0x01, 0xfc, 0x7f, 0x80, 
	0x00, 0xf8, 0xff, 0x00, 0x00, 0x71, 0xfe, 0x00, 0x00, 0x23, 0xfc, 0x00, 0x00, 0x07, 0xf8, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x02, 0x3f, 0xc4, 0x40, 0x07, 0x7f, 0x8e, 0xe0, 
	0x07, 0xff, 0x1f, 0xe0, 0x07, 0xfe, 0x3f, 0xe0, 0x03, 0xfc, 0x3f, 0xc0, 0x01, 0xf8, 0x1f, 0x80, 
	0x00, 0xf8, 0x1f, 0x00, 0x0c, 0x7c, 0x3e, 0x30, 0x1e, 0x3c, 0x3c, 0x78, 0x3e, 0x00, 0x00, 0x7c, 
	0x7c, 0x00, 0x00, 0x3e, 0x78, 0x00, 0x00, 0x1e, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t tank[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x7f, 0xfe, 0x0f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 
	0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0xff, 0xff, 0xe6, 0xff, 0xff, 0xff, 0xf0, 
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xe0, 
	0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t apv[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xee, 0x00, 0x73, 0xe7, 0xee, 0x00, 
	0x6b, 0xeb, 0xef, 0x00, 0x63, 0xe3, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xf8, 
	0x4f, 0xf9, 0xf0, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x78, 0x7f, 0xfe, 0x1e, 0x67, 0x9f, 0xf9, 0xe6, 
	0x4c, 0xcf, 0xf3, 0x32, 0x13, 0x2f, 0xf4, 0xc8, 0x35, 0xa7, 0xe5, 0xac, 0x08, 0xc0, 0x03, 0x10, 
	0x08, 0xc0, 0x03, 0x10, 0x05, 0x80, 0x01, 0xa0, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t euro_sale [] PROGMEM = {
	0x00, 0x01, 0xff, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xfc, 
	0x00, 0x7f, 0xff, 0xfe, 0x00, 0xff, 0xc3, 0xfe, 0x00, 0xfe, 0x00, 0x7c, 0x01, 0xfc, 0x00, 0x38, 
	0x03, 0xf8, 0x00, 0x10, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 
	0x7f, 0xff, 0xfe, 0x30, 0x7f, 0xff, 0xfe, 0x78, 0x07, 0xff, 0xfc, 0xfc, 0x07, 0xe0, 0x01, 0xfe, 
	0x07, 0xe0, 0x01, 0xfe, 0x07, 0xe0, 0x00, 0x78, 0x7f, 0xff, 0xfc, 0x78, 0x7f, 0xff, 0xfe, 0x78, 
	0x7f, 0xff, 0xfe, 0x78, 0x7f, 0xff, 0xfe, 0x78, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x10, 
	0x01, 0xfc, 0x00, 0x38, 0x00, 0xfe, 0x00, 0x7c, 0x00, 0xff, 0x83, 0xfc, 0x00, 0x7f, 0xff, 0xfc, 
	0x00, 0x3f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x01, 0xff, 0x00
};
static const uint8_t euro_buy [] PROGMEM = {
	0x00, 0x01, 0xff, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xfc, 
	0x00, 0x7f, 0xff, 0xfe, 0x00, 0xff, 0xc3, 0xfe, 0x00, 0xfe, 0x00, 0x7c, 0x01, 0xfc, 0x00, 0x38, 
	0x03, 0xf8, 0x00, 0x10, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 
	0x7f, 0xff, 0xfe, 0x78, 0x7f, 0xff, 0xfe, 0x78, 0x07, 0xff, 0xfc, 0x78, 0x07, 0xe0, 0x00, 0x78, 
	0x07, 0xe0, 0x00, 0x78, 0x07, 0xe0, 0x00, 0x78, 0x7f, 0xff, 0xfd, 0xfe, 0x7f, 0xff, 0xfe, 0xfc, 
	0x7f, 0xff, 0xfe, 0x78, 0x7f, 0xff, 0xfe, 0x30, 0x03, 0xf0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x10, 
	0x01, 0xfc, 0x00, 0x38, 0x00, 0xfe, 0x00, 0x7c, 0x00, 0xff, 0x83, 0xfc, 0x00, 0x7f, 0xff, 0xfc, 
	0x00, 0x3f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x01, 0xff, 0x00
};
static const uint8_t dollar_buy [] PROGMEM = {
	0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x01, 0xf3, 0xcf, 0xb8, 
	0x01, 0xf3, 0xc3, 0x78, 0x03, 0xe3, 0xc0, 0x78, 0x03, 0xe3, 0xc0, 0x78, 0x03, 0xf3, 0xc0, 0x78, 
	0x01, 0xff, 0xc0, 0x78, 0x01, 0xff, 0xc1, 0xfe, 0x00, 0xff, 0xf8, 0xfc, 0x00, 0x7f, 0xfe, 0x78, 
	0x00, 0x1f, 0xff, 0x30, 0x00, 0x07, 0xff, 0x80, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x03, 0xcf, 0xc0, 
	0x00, 0x03, 0xc7, 0xe0, 0x00, 0x03, 0xc3, 0xe0, 0x00, 0x83, 0xc3, 0xe0, 0x01, 0xc3, 0xc7, 0xc0, 
	0x03, 0xf3, 0xcf, 0xc0, 0x03, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00
};
static const uint8_t dollar_sale [] PROGMEM = {
	0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x7f, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x01, 0xf3, 0xcf, 0xb0, 
	0x01, 0xf3, 0xc3, 0x78, 0x03, 0xe3, 0xc0, 0xfc, 0x03, 0xe3, 0xc1, 0xfe, 0x03, 0xf3, 0xc0, 0x78, 
	0x01, 0xff, 0xc0, 0x78, 0x01, 0xff, 0xc0, 0x78, 0x00, 0xff, 0xf8, 0x78, 0x00, 0x7f, 0xfe, 0x78, 
	0x00, 0x1f, 0xff, 0x38, 0x00, 0x07, 0xff, 0x80, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x03, 0xcf, 0xc0, 
	0x00, 0x03, 0xc7, 0xe0, 0x00, 0x03, 0xc3, 0xe0, 0x00, 0x83, 0xc3, 0xe0, 0x01, 0xc3, 0xc7, 0xc0, 
	0x03, 0xf3, 0xcf, 0xc0, 0x03, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00
};

AirAlarmDisplay::AirAlarmDisplay(int pin)
{
  _disy = pin;
}

void AirAlarmDisplay::begin()
{
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.clearDisplay();
    display.setTextColor(WHITE);
}

void AirAlarmDisplay::wifiConnect(char* ssid, int bitmapType)
{
    display.clearDisplay();

    if (bitmapType == 1) 
    {
      display.drawBitmap(0, 0 + _disy, strip1, 32, 32, 1);  
    } 
    if (bitmapType == 2)
    {
      display.drawBitmap(0, 0 + _disy, strips2, 32, 32, 1);  
    }
    if (bitmapType == 3)
    {
      display.drawBitmap(0, 0 + _disy, strips3, 32, 32, 1);  
    }
    if (bitmapType == 4)  
    {
      display.drawBitmap(0, 0 + _disy, strips4, 32, 32, 1);  
    }
    
    display.setCursor(35, 8 + _disy);
    display.setTextSize(1);
    display.println(utf8cyr("Підключення до:"));
    display.setCursor(35, 16 + _disy);
    display.setTextSize(1);
    display.println(ssid);
    display.display();
}

void AirAlarmDisplay::wifiConnectProblem(char *APSsid, char *APPassword)
{
    // Draw bitmap on the screen
    display.clearDisplay();
    display.drawBitmap(0, 0 + _disy, dino, 28, 32, 1);
    display.setTextSize(2);
    if (APPassword == "")
    {
      display.setCursor(23, 16 + _disy);
      display.println(APSsid);
    }
    else
    {
      display.setCursor(30, 0 + _disy);
      display.println(APSsid);
      display.setCursor(23, 16 + _disy);
      display.println(APPassword);
    }
    display.display();
}

void AirAlarmDisplay::displayTimeInfo(NTPClient timeClient, int displayMode)
{
    
    int hour = timeClient.getHours();
    int minute = timeClient.getMinutes();
  
    if(displayMode == 1) {
      display.setCursor(0, 0 + _disy);
      // Форматуємо час у рядок для виведення на дисплей
      String time = "";
      if (hour < 10) time += "0";
      time += hour;
      time += ":";
      if (minute < 10) time += "0";
      time += minute;
  
      display.clearDisplay(); // clear display
      display.setTextSize(4); 
      oledDisplayCenter(time, 0, 132, 0);
    }
    if(displayMode == 2) {
      String previousDate;
      int day = timeClient.getDay();
      String daysOfWeek[] = {"Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П'ятниця", "Субота"};
      time_t now = timeClient.getEpochTime();
      struct tm * timeinfo;
      timeinfo = localtime(&now);
      // int day = timeinfo->tm_mday;
      // int month = ;
      String date = "";
      if (timeinfo->tm_mday < 10) date += "0";
      date += timeinfo->tm_mday;
      date += ".";
      if (timeinfo->tm_mon < 10) date += "0";
      date += timeinfo->tm_mon + 1;
      date += ".";
      date += timeinfo->tm_year + 1900;
      if (date != previousDate) {
        previousDate = date;
        display.setTextSize(2); 
        display.clearDisplay();

        oledDisplayCenter(utf8cyr(daysOfWeek[day]), 0, 132, 0);
        oledDisplayCenter(date, 16, 132, 0);
      }
    }
}

void AirAlarmDisplay::displayAlarmInfo(bool myCityEnable, String durationTransformed)
{
    if (myCityEnable) {
        display.clearDisplay();
        display.drawBitmap(0, 0 + _disy, alarma, 32, 32, 1);
    } else {
        display.clearDisplay();
        display.drawBitmap(0, 0 + _disy, no_alarm, 32, 32, 1);
    }  

    display.setTextSize(3);
    oledDisplayCenter(durationTransformed, 4, 100, 32);
    display.display();
}

void AirAlarmDisplay::displayWeatherInfo(int weatherId, String weather)
{
    display.clearDisplay();
    if (weatherId == 2) display.drawBitmap(0, 0 + _disy, thunderstorm, 32, 32, 1);
    if (weatherId == 3) display.drawBitmap(0, 0 + _disy, drizzle, 32, 32, 1);
    if (weatherId == 5) display.drawBitmap(0, 0 + _disy, rain, 32, 32, 1);
    if (weatherId == 6) display.drawBitmap(0, 0 + _disy, snow, 32, 32, 1);
    if (weatherId == 7) display.drawBitmap(0, 0 + _disy, atmosphere, 32, 32, 1);
    if (weatherId == 8) display.drawBitmap(0, 0 + _disy, clear, 32, 32, 1);
    if (weatherId == 9) display.drawBitmap(0, 0 + _disy, clouds, 32, 32, 1);
    display.setTextSize(2);
    oledDisplayCenter(weather, 8, 100, 32);
}

void AirAlarmDisplay::displayWarInfo(int warMode, bool canShow, int warData)
{
    display.setTextSize(3);
    display.clearDisplay();
    if (warMode == 1 && canShow) {
      display.drawBitmap(0, 0 + _disy, swords, 32, 32, 1);
      oledDisplayCenter(String(warData), 4, 100, 32);
      display.display();
    }
    if (warMode == 2 && canShow) {
      display.drawBitmap(0, 0 + _disy, pig, 32, 32, 1);
      oledDisplayCenter(String(warData) + "K", 4, 100, 32);
      display.display();
    }
    if (warMode == 3 && canShow) {
      display.drawBitmap(0, 0 + _disy, tank, 32, 32, 1);
      oledDisplayCenter(String(warData), 4, 100, 32);
      display.display();
    }
    if (warMode == 4 && canShow) {
      display.drawBitmap(0, 0 + _disy, apv, 32, 32, 1);
      oledDisplayCenter(String(warData), 4, 100, 32);
      display.display();
    }
}

void AirAlarmDisplay::displayCurrency(int currencyMode, float usdBuy, float usdSale, float eurBuy, float eurSale)
{
   display.clearDisplay();
      display.setTextSize(3);
      if (currencyMode ==  1) {
        display.drawBitmap(0, 0 + _disy, dollar_buy, 32, 32, 1);
        oledDisplayCenter(String(usdBuy), 4, 100, 32);
      }
      if (currencyMode == 2) {
        display.drawBitmap(0, 0 + _disy, dollar_sale, 32, 32, 1);
        oledDisplayCenter(String(usdSale), 4, 100, 32);
      }
      if (currencyMode ==  3) {
        display.drawBitmap(0, 0 + _disy, euro_buy, 32, 32, 1);
        oledDisplayCenter(String(eurBuy), 4, 100, 32);
      }
      if (currencyMode == 4) {
        display.drawBitmap(0, 0 + _disy, euro_sale, 32, 32, 1);
        oledDisplayCenter(String(eurSale), 4, 100, 32);
      }
      display.display();
}

void AirAlarmDisplay::displayClear()
{
  display.clearDisplay();
  display.display();
}

void AirAlarmDisplay::oledDisplayCenter(String text, int y, int screenWidth, int offset) 
{
    int16_t x1;
    int16_t y1;
    uint16_t width;
    uint16_t height;

    display.getTextBounds(text, 0, 0, &x1, &y1, &width, &height);

    // display on horizontal and vertical center
    display.setCursor(((screenWidth - width) / 2) + offset, y + _disy);
    display.println(text); // text to display
    display.display();
}

String AirAlarmDisplay::utf8cyr(String source) {
    int i,k;
    String target;
    unsigned char n;
    char m[2] = { '0', '\0' };

    k = source.length(); i = 0;
    while (i < k) {
        n = source[i]; i++;
        if (n >= 0xC0) {
        switch (n) {
            case 0xD0: {                                // перекодировать 0 блок (прописные)
            n = source[i]; i++;                 
            if (n == 0x81) { n = 0xA8; break; }       // перекодировать букву Ё
            if (n == 0x84) { n = 0xAA; break; }       // перекодировать букву Є
            if (n == 0x86) { n = 0xB1; break; }       // перекодировать букву І                                                        
            if (n == 0x87) { n = 0xAF; break; }       // перекодировать букву Ї
            if (n >= 0x90 && n <= 0xBF) n = n + 0x2F; break; // перекодировать остальные буквы 0 блока
            }
            case 0xD1: {                                // перекодировать 1 блок (строчные)                   
            n = source[i]; i++;
            if (n == 0x91) { n = 0xB7; break; }       // перекодировать букву ё 
            if (n == 0x94) { n = 0xB9; break; }       // перекодировать букву є
            if (n == 0x96) { n = 0xB2; break; }       // перекодировать букву і             
            if (n == 0x97) { n = 0xBE; break; }       // перекодировать букву ї 
            if (n >= 0x80 && n <= 0x8F) n = n + 0x6F; break; // перекодировать остальные буквы 1 блока
            }
            case 0xD2: {                                // перекодировать 2 блок (всё вместе)
            n = source[i]; i++;
            if (n == 0x90) { n = 0xA5; break; }       // перекодировать букву Ґ          
            if (n == 0x91) { n = 0xB3; break; }       // перекодировать букву ґ             
            }
        }
        }
        m[0] = n; 
        target = target + String(m);
    }
    return target;
    }