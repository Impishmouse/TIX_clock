// =======================================

#include <ArduinoJson.h> //json –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
#include <Adafruit_NeoPixel.h> //neopixel –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–æ—é
#include <WiFi.h> //–¥–ª—è –∑–≤'—è–∑–∫—É
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <UniversalTelegramBot.h> //Telegram –±–æ—Ç
#include <WiFiManager.h> //–ö–µ—Ä—É–≤–∞–Ω–Ω—è WiFi
#include <NTPClient.h> //–ß–∞—Å
#include <HTTPUpdate.h> //–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—à–∏–≤–∫–∏ —á–µ—Ä–µ–∑ —Ç–≥ –±–æ—Ç–∞
#include <Wire.h> 
#include <AirAlarmDisplay.h>
#include "time.h"
#include <string> 

// ============ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ============
char ssid[] = "StarLord";                  //"StarLord"; //–ù–∞–∑–≤–∞ —Ç–≤–æ—î—ó –º–µ—Ä–µ–∂—ñ WiFi
char password[] = "strongWifipwd";              //"strongWifipwd"; //–ü–∞—Ä–æ–ª—å –≤—ñ–¥ —Ç–≤–æ–≥–æ WiFi
char APSsid[] = "TixClock"; //–ù–∞–∑–≤–∞ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø—É
char APPassword[] = ""; //–ü–∞—Ä–æ–ª—å –≤—ñ–¥ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø—É
int brightness = 70; //–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å %
bool autoBrightness = true; //–í–≤—ñ–º–∫–Ω–µ–Ω–∞/–≤–∏–º–∫–Ω–µ–Ω–∞ –∞–≤—Ç–æ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å

#define BOTtoken "6048625903:AAEe-Sr6wOnMzcp-LaLQxU9FwALzpDqhpIU"
#define CHAT_ID "260761974"
int botRequestDelay = 1000;

const int day = 9; //–ü–æ—á–∞—Ç–æ–∫ –¥–Ω—è
const int night = 21; //–ü–æ—á–∞—Ç–æ–∫ –Ω–æ—á—ñ
const int dayBrightness = 70; //–î–µ–Ω–Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å %
const int nightBrightness = 20; //–ù—ñ—á–Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å %
const long  gmtOffset_sec = 7200;


#define LED_PIN 13
#define LED_COUNT 27


Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

DynamicJsonDocument doc(30000);

WiFiClientSecure client;
WiFiManager wm;
WiFiUDP ntpUDP;

const char* ntpServer = "ua.pool.ntp.org";

NTPClient timeClient(ntpUDP, ntpServer, 7200);
UniversalTelegramBot bot(BOTtoken, client);

String utf8cyr(String source);
void colorWipe(int wait);
int linearSearch(int *arr, int arr_len, int target);
void setLedGroupAndColor(int* legGroup, int legGroup_len, int* enableIndexes, int enabled_len, uint32_t ledColor);

unsigned long lastTimeBotRan;
unsigned long duration;
static unsigned long times[25];
String color;
static int ledColor[25];

int arrAlarms = sizeof(ledColor) / sizeof(int);

// int red, green, blue;
// bool startMessage = false;
bool enable = false;
int currencyMode = 1;
int period = 15000;

const long dateInterval = 200000;
unsigned long lastTime, previousMillisA = 0, previousMillisB = 0, previousMillisC = 0, previousMillisD = 0, previousMillisE = 0, previousMillisG = 0, previousMillisH = 0, lastWeatherTime = 0, startTime = 0, previousMillisAutoSwitchDisplay = 0;


static bool wifiConnected;

String mode = "clock"; //–†–µ–∂–∏–º

bool enabled = true;
int disy = 0;
// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å



const int   daylightOffset_sec = 3600;


static int ledColorBlue[] =   { 1, 3, 8, 9, 10, 13, 15, 20, 21, 22, 25};
static int ledColorYellow[] = { 0, 4, 7, 6, 11, 12, 16, 17, 19, 23, 24};

static int ledHour1[] = { 0, 1, 2};
static int ledHour2[] = { 3, 4, 5, 6, 7, 8, 9, 10, 11};

static int ledMin1[] = { 12, 13, 14, 15, 16, 17};
static int ledMin2[] = { 18, 19, 20, 21, 22, 23, 24, 25, 26};

const int ARRAY_SIZE = 9; // –†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫–∏—Å—Ç—å —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥—ñ–≤ –Ω–∞ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.



void initWiFi() {

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  // TODO  Add led breath while wifi connection
  
  //airAlarmDisplay.wifiConnect(ssid, 2);
  //delay(700);
  
  if (WiFi.status() != WL_CONNECTED)
  {
    // TODO Add indication if problem  connect to wifi

    bool res;
    res = wm.autoConnect(APSsid, APPassword);
    if (!res)
    {
      Serial.println("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
      ESP.restart();
    }
    else
    {
	  // TODO add indication if connected			
      Serial.println("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ :)");
    }
  }
}

void initStrip() {
  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  strip.setBrightness(brightness * 2.55);
  colorWipe(60);
}

void initTime() {
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ—Ç–Ω—å–æ–≥–æ —á–∞—Å—É –Ω–∞ false
  bool isDaylightSaving = false;
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑ —Å–µ—Ä–≤–µ—Ä–∞ NTP
  timeClient.begin();
  timeClient.update();
  String formattedTime = timeClient.getFormattedTime();
  // –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–º —á–∞—Å–æ–º –Ω–∞ —Å–∫–ª–∞–¥–æ–≤—ñ
  int day, month, year, hour, minute, second;
  sscanf(formattedTime.c_str(), "%d-%d-%d %d:%d:%d", &year, &month, &day, &hour, &minute, &second);
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ –±–µ—Ä–µ–∑–µ–Ω—å-–∂–æ–≤—Ç–µ–Ω—å
  if (month >= 4 && month <= 10) {
    // –Ø–∫—â–æ —Ç–∞–∫, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å –Ω–∞ true
    isDaylightSaving = true;
  }
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ—â–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ª—ñ—Ç–Ω—å–æ–≥–æ —á–∞—Å—É
  if (isDaylightSaving) {
    timeClient.setTimeOffset(14400); // UTC+3 –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏
  }
  else {
    timeClient.setTimeOffset(10800); // UTC+2 –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏
  }
}

// –ó–∞—Å–≤—ñ—Ç–∫–∞ —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ –ø—Ä–∞–ø–æ—Ä–∞
void colorWipe(int wait) {
  int count = sizeof(ledColorYellow) / sizeof(int);
  for (int i = 0; i < count; i++) { // For each pixel in strip...
    strip.setPixelColor(ledColorBlue[i], strip.Color(0, 0, 255));
    strip.setPixelColor(ledColorYellow[i], strip.Color(255, 255, 0));//  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.
void success(String message) {
  String keyboardJson = "[[\"" + String(enabled ? "‚è∏üí°" : "‚ñ∂Ô∏èüí°") + "\"], [\"üîÜ –ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å (" + String(autoBrightness ? "ü§ñ": String(brightness) + "%") + ")\"], [\"üîß –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—à–∏–≤–∫—É\"], [\"üîÑ –†–µ—Å—Ç–∞—Ä—Ç\"]]";
  bot.sendMessageWithReplyKeyboard(CHAT_ID, message, "", keyboardJson, true);
}

// Handle what happens when you receive new messages
void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));
  for (int i=0; i<numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    // Chat id of the requester
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "–ù–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á");
      continue;
    }
    String text = bot.messages[i].text;
    Serial.println(text);
    String from_name = bot.messages[i].from_name;
    if (text == "/start") {
      success("–ü—Ä–∏–≤—ñ—Ç, " + from_name + ".\n–î–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –±–æ—Ç–∞");  
    }
    if (text == String(enabled ? "‚è∏üí°" : "‚ñ∂Ô∏èüí°")) {
      if (enabled) {
         enabled = false;
        success("‚è∏");
      } else { 
        enabled = true;
        success("‚ñ∂Ô∏è");
      }  
    }

    if (text == "üîÜ –ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å (" + String(autoBrightness ? "ü§ñ": String(brightness) + "%") + ")") {
      // bot.sendMessage(chat_id, "–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤—ñ–¥—Å—Ç–æ—Ç–∫–∞—Ö:\n*–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ-—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –≤–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è 0");
      String keyboardJson = "[[\"100%\", \"75%\", \"50%\", \"25%\", \"1%\"], [\"" + String(autoBrightness ? "" : "ü§ñ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å") + "\"], [\"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "üîÜ –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤—ñ–¥—Å—Ç–æ—Ç–∫–∞—Ö:", "", keyboardJson, true);
      while (true) {
        int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        if (numNewMessages > 0) {
          String text = bot.messages[0].text;
          if (text.toInt() >= 1 && text.toInt() <= 100) {
            autoBrightness = false;
            brightness = text.toInt();
            strip.setBrightness(brightness * 2.55);
            strip.show();
            success("‚úÖ");
            break;
          } else if (text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") {
              success("‚úÖ");
              break;
            } else if (text == "ü§ñ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å") {
              autoBrightness = true;
              success("ü§ñ");
              break;
            } else {
              bot.sendMessage(chat_id, "üîÜ –ó–Ω–∞—á–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 1 –¥–æ 100:");
              bot.sendMessage(chat_id, "ü§∑");
            }
        }
        delay(1000);
      }
    }
    
    if (text == "üîß –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—à–∏–≤–∫—É") {
      success("üîß –©–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—à–∏–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .bin");
    }
    if (text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç") {
      success("üîÑ");
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
      ESP.restart();
    }

	//	
    if (bot.messages[i].hasDocument) {
      httpUpdate.rebootOnUpdate(false);
      t_httpUpdate_return ret = (t_httpUpdate_return)3;
      bot.sendMessage(chat_id, "üîß –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—à–∏–≤–∫–∏...", "");
      ret = httpUpdate.update(client, bot.messages[i].file_path);
      switch (ret) {
        case HTTP_UPDATE_FAILED:
          bot.sendMessage(chat_id, "‚ùå " + String(httpUpdate.getLastError()) + ": " + httpUpdate.getLastErrorString(), "");
          // break;
        case HTTP_UPDATE_NO_UPDATES:
          bot.sendMessage(chat_id, "‚ùå –ù–µ–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—å", "");
          // break;
        case HTTP_UPDATE_OK:
          bot.sendMessage(chat_id, "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ", "");
          bot.sendMessage(chat_id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...", "");
          numNewMessages = bot.getUpdates(bot.last_message_received + 1);
          ESP.restart();
      }    
    }
  }
}


int* getSeparateDigits (int input_digit)
{
  static int ret[2];

  //ret[0] = (input_digit >= 10) ? (input_digit >> 4) : 0; // –ó—Å—É–≤ –Ω–∞ 4 –±—ñ—Ç–∏ (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –¥—ñ–ª–µ–Ω–Ω—é –Ω–∞ 16)
  //ret[1] = input_digit & 0x0F;  // –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å

  if (input_digit >= 10) {
    ret[0] = input_digit / 10;   // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Å—è—Ç–∫–∏
    ret[1] = input_digit % 10;   // –û—Ç—Ä–∏–º—É—î–º–æ –æ–¥–∏–Ω–∏—Ü—ñ
  } else {
    // –Ø–∫—â–æ —á–∏—Å–ª–æ –º–µ–Ω—à–µ 10, –¥–µ—Å—è—Ç–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω—É–ª—å–æ–≤–∏–º–∏
    ret[0] = 0;
    ret[1] = input_digit;
  }


  return ret;
}

struct tm getLocalTime()
{
  struct tm timeinfo;

  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return timeinfo;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");

  return timeinfo;
}

void printLocalTime(struct tm timeinfo)
{
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");

  int* hour_a = getSeparateDigits(timeinfo.tm_hour);

  /*auto hour = std::to_string(timeinfo.tm_hour);
  std::string hour_1 = hour.substr(0,1);
  std::string hour_2 = hour.substr(1,2);

  if (timeinfo.tm_hour < 10)
  {
    hour_2 = hour_1;
    hour_1 = "0";
  } 

  auto minutes = std::to_string(timeinfo.tm_min);
  std::string minute_1 = minutes.substr(0,1);
  std::string minute_2 = minutes.substr(1,2);

  if (timeinfo.tm_min < 10)
  {
    minute_2 = minute_1;
    minute_1 = "0";
  }*/

  Serial.print("Hour1:");
  Serial.println(std::to_string(hour_a[0]).c_str());

  Serial.print("Hour2:");
  Serial.println(std::to_string(hour_a[1]).c_str());

  int* minutes_a = getSeparateDigits(timeinfo.tm_min);
  Serial.print("Minute1:");
  Serial.println(std::to_string(minutes_a[0]).c_str());

  Serial.print("Minute2:");
  Serial.println(std::to_string(minutes_a[1]).c_str());
}


// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª—å–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ –º–∞—Å–∏–≤–∞. 
// –ü–æ—Ç–º—ñ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î—Ç—å—Å—è —â–æ–± –∑–∞—Å–≤—ñ—Ç–∏—Ç–∏ —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–∏
// int led_Count - –∫—ñ–ª—å–∫–∏—Å—Ç—å —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥—ñ–≤ —è–∫—ñ —Ç—Ä–µ–±–∞ –∑–∞—Å–≤—ñ—Ç–∏—Ç–∏ - –≥–æ–¥–∏–Ω–∞ –∞–±–æ –º–∏–Ω—É—Ç–∞.
// int range_min, int range_max - –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –∫—ñ–ª—å–∫–∏—Å—Ç—å —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥—ñ–≤ —è–∫–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏. - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å–µ–∫—Ü–∏—ó
int* getRandomLeds(int led_Count, int range_min, int range_max)
{
  // Serial.print("Led count:");
  // Serial.println(led_Count);  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–ª–∞ –≤ —Å–µ—Ä—ñ–π–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä

  static int numbers[ARRAY_SIZE];  // –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª
  bool used[ARRAY_SIZE];    // –ú–∞—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —á–∏—Å–µ–ª

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Å–∏–≤—É used
  for (int i = 0; i < ARRAY_SIZE; i++) {
    used[i] = false;
  }

  for (int i = 0; i < led_Count; i++) {
    int num;
    do {
      num = random(range_min, range_max + 1);  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞
      Serial.print("–≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ:");
      Serial.println(num);
      Serial.print("used[num]:");
      Serial.println(used[num]);
    } while (used[num]);  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —á–∏—Å–ª–æ –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ

    numbers[i] = num;
    used[num] = true;
    Serial.println(numbers[i]);  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–ª–∞ –≤ —Å–µ—Ä—ñ–π–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä
  }
  return numbers;
}

void showTixHour(int* hours_a)
{
  Serial.print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–æ–¥–∏–Ω–∏ –¥–µ—Å—è—Ç–∫–∏:");
  Serial.println(hours_a[0]);
  setLedGroupAndColor(ledHour1, 3, getRandomLeds(hours_a[0], 0, 2), hours_a[0], strip.Color(255, 0, 0));
  Serial.print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–æ–¥–∏–Ω–∏ –æ–¥–∏–Ω–∏—Ü—ñ:");
  Serial.println(hours_a[1]);
  setLedGroupAndColor(ledHour2, 9, getRandomLeds(hours_a[1], 0, 8), hours_a[1], strip.Color(0, 255, 0));
}

void showTixMinutes(int* mins_a)
{
  Serial.print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∏–Ω—É—Ç–∏ –¥–µ—Å—è—Ç–∫–∏:");
  Serial.println(mins_a[0]);
  setLedGroupAndColor(ledMin1, 6, getRandomLeds(mins_a[0], 0, 5), mins_a[0], strip.Color(0, 0, 255));
  Serial.print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∏–Ω—É—Ç–∏ –æ–¥–∏–Ω–∏—Ü—ñ:");
  Serial.println(mins_a[1]);
  setLedGroupAndColor(ledMin2, 9, getRandomLeds(mins_a[1], 0, 8), mins_a[1], strip.Color(255, 0, 0));
}

/*
  –ü–µ—Ä–µ–¥–∞–º–æ –≤ 
  legGroup - –º–∞—Å–∏–≤ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥—ñ–≤ –¥–ª—è —Å–µ–∫—Ü—ñ—ó (–¥–µ—Å—è—Ç–∫–∏ –≥–æ–¥–∏–Ω, –æ–¥–µ–Ω–∏—Ü—ñ –≥–æ–¥–∏–Ω, ...)
  legGroup_len - –¥–æ–≤–∂–∏–Ω—É —Ü—å–æ–≥–æ –º–∞—Å–∏–≤–∞.
  enableIndexes - –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±—Ä–∞–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –º–∞—Å–∏–≤–∞ —è–∫—ñ —Ç—Ä–µ–±–∞ –∑–∞—Å–≤—ñ—Ç–∏—Ç–∏.
  enabled_len - –¥–æ–≤–∂–∏–Ω–∞ –º–∞—Å–∏–≤–∞.
  ledColor - –∫–æ–ª—å–æ—Ä —è–∫—ñ–º —Ç—Ä–µ–±–∞ –∑–∞—Å–≤—ñ—Ç–∏—Ç–∏.
 */
void setLedGroupAndColor (int* legGroup, int legGroup_len, int* enableIndexes, int enabled_len, uint32_t ledColor)
{
  for (int i = 0; i < legGroup_len; i++) { // For each pixel in strip...
    if (linearSearch(enableIndexes, enabled_len, i) >= 0)
    {
      Serial.print("Led enable:");
      Serial.println(legGroup[i]);
      strip.setPixelColor(legGroup[i], ledColor);
    } 
    else 
    {
      Serial.print("Off led :");
      Serial.println(legGroup[i]);
      strip.setPixelColor(legGroup[i], strip.Color(0, 0, 0));  // –≤–∏–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥
    }
  }
}

int linearSearch(int *arr, int arr_len, int target) 
{
    for (int i = 0; i < arr_len; i++) 
    {
      if (arr[i] == target)
      {
        return target; // –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
      }
    }
    return -1;  // –ü–æ–≤–µ—Ä—Ç–∞—î -1, —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
}

void setup() 
{
  Serial.begin(115200);

  initStrip();

  initWiFi();

  initTime();
  
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  success("üí°");

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}

void loop() {

  wifiConnected = WiFi.status() == WL_CONNECTED;
  if (wifiConnected) {
    if (millis() > lastTimeBotRan + botRequestDelay) {
      int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

      while (numNewMessages) {
        Serial.println("got response");
        handleNewMessages(numNewMessages);
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
      }
      lastTimeBotRan = millis();
    }
    if (enabled) {
      if (millis() - lastTime > period ) {
        if (autoBrightness) {
		      //–∞–≤—Ç–æ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å
		      timeClient.update();
		      int hour = timeClient.getHours();
		      bool isDay = hour >= day && hour < night;
		      brightness = isDay ? dayBrightness : nightBrightness;
          strip.setBrightness(brightness * 2.55);
          strip.show();
        }

        
        unsigned long  t = millis();
        unsigned long hv = 180000;
        lastTime = t;
        
        
        if (mode == "clock") 
        {
          struct tm timeInfo = getLocalTime();
          printLocalTime(timeInfo);
          
          int* hour_a = getSeparateDigits(timeInfo.tm_hour);
          showTixHour(hour_a);
          int* minutes_a = getSeparateDigits(timeInfo.tm_min);
          showTixMinutes(minutes_a);
          strip.show();  //  Update strip to match
          delay(60);                           //  Pause for a moment

        }

        /*if (mode == "flag") {
          int count = sizeof(ledColorYellow) / sizeof(int);
          for (int i = 0; i < count; i++) { // For each pixel in strip...
            strip.setPixelColor(ledColorBlue[i], strip.Color(0, 0, 255));
            strip.setPixelColor(ledColorYellow[i], strip.Color(255, 255, 0));//  Set pixel's color (in RAM)
            strip.show();
          }
        }
        if (mode == "flashlight") {
          for (int i = 0; i < LED_COUNT; i++) {
            if (color == "white") strip.setPixelColor(i, 255, 255, 255);
            if (color == "red") strip.setPixelColor(i, 255, 0, 0);
            if (color == "orange") strip.setPixelColor(i, 255, 165, 0);
            if (color == "yellow") strip.setPixelColor(i, 255, 255, 0);
            if (color == "green") strip.setPixelColor(i, 0, 255, 0);
            if (color == "blue") strip.setPixelColor(i, 0, 0, 255);
            if (color == "purple") strip.setPixelColor(i, 128, 0, 128);
          }
          strip.show();
        }*/
      }
    } else {
      strip.clear();
      strip.show();
      // success_message();
    }
  } else {
    strip.clear();
    strip.show();
    delay(10000);
    ESP.restart();
  }
}